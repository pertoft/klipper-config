# This file contains common pin mappings for the BigTreeTech SKR 2.
# To use this config, the firmware should be compiled for the
# STM32F407 with a "32KiB bootloader".

# In newer versions of this board shipped in late 2021 the STM32F429
# is used, if this is the case compile for this with a "32KiB bootloader"
# You will need to check the chip on your board to identify which you have.
#
# The "make flash" command does not work on the SKR 2. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR 2
# with that SD card.

# See docs/Config_Reference.md for a description of parameters.

# Note: The initial revision of this board has a flaw that can cause
# damage to itself and other boards. Be sure to verify the board is
# not impacted by this flaw before using it.

[z_tilt]
z_positions:
  310,150
  0,150
points:
  60,150
  320,150
speed: 200
retries: 20
horizontal_move_z: 5
retry_tolerance: 0.0025
#retry_tolerance: 0.01


[stepper_x]
step_pin: PE2
dir_pin: !PE1
enable_pin: !PE3
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC1
position_endstop: 0
position_max: 320
homing_speed: 100

[tmc2209 stepper_x]
uart_pin: PE0
run_current: 0.800
diag_pin:
stealthchop_threshold: 999999

[stepper_y]
step_pin: PD5
dir_pin: !PD4
enable_pin: !PD6
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC3
position_endstop: 0
position_max: 300
homing_speed: 100

[tmc2209 stepper_y]
uart_pin: PD3
run_current: 0.800
diag_pin:
stealthchop_threshold: 999999

[stepper_z]
step_pin: PA15
dir_pin: PA8
enable_pin: !PD1
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_min: -10
position_max: 400
homing_speed: 20

[tmc2209 stepper_z]
uart_pin: PD0
run_current: 0.800
diag_pin:
stealthchop_threshold: 999999

[stepper_z1]
step_pin: PD11
dir_pin: PD10
enable_pin: !PD13
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop

[tmc2209 stepper_z1]
uart_pin: PD12
run_current: 0.800
diag_pin:
stealthchop_threshold: 999999


[extruder]
step_pin: PD15
dir_pin: !PD14
enable_pin: !PC7
microsteps: 16
rotation_distance: 21.44
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PB3
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA2
control: pid
max_extrude_only_distance: 550
min_temp: 1
max_temp: 300

[tmc2209 extruder]
uart_pin: PC6
run_current: 0.600
diag_pin:
stealthchop_threshold: 999999


[heater_bed]
heater_pin: PD7
sensor_type: ATC Semitec 104GT-2
sensor_pin: PA1
#control: pid
min_temp: 0
max_temp: 130
#pid_Kp: 690.34
#pid_Ki: 111.47
#pid_Kd: 1068.83


[verify_heater heater_bed]
max_error: 180
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
check_gain_time: 120
#   This controls heater verification during initial heating. Smaller
#   values result in stricter checking and larger values allow for
#   more time before an error is reported. Specifically, during
#   initial heating, as long as the heater increases in temperature
#   within this time frame (specified in seconds) then the internal
#   "error counter" is reset. The default is 20 seconds for extruders
#   and 60 seconds for heater_bed.
#hysteresis: 5
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. It is rare to customize this
#   value. The default is 5.
#heating_gain: 2
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.


[heater_fan nozzle_cooling_fan]
pin: PB6

[fan]
pin: PB7

# Due to BTT implementing a Marlin-specific safety feature,
# "anti-reversal stepper protection", this pin needs pulling
# high to pass power to stepper drivers and most FETs

[output_pin motor_power]
pin: PC13
value: 1

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f429xx_380035001151303239383034-if00

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100


########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE10, EXP1_7=PE12, EXP1_9=<GND>,
    EXP1_2=PB0, EXP1_4=PE9, EXP1_6=PE11, EXP1_8=PE13, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,
    EXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>

# See the sample-lcd.cfg file for definitions of common LCD displays.

[display]
lcd_type: st7920
cs_pin: EXP1_7
sclk_pin: EXP1_6
sid_pin: EXP1_8
encoder_pins: ^EXP1_5, ^EXP1_3
click_pin: ^!EXP1_2

[output_pin beeper]
pin: EXP1_1

[bltouch]
sensor_pin: PE4
control_pin: PE5
x_offset: -43.65
y_offset: -10
#z_offset: 0.0
speed: 20

[safe_z_home]
home_xy_position: 150,150
speed: 50
z_hop: 15              # Move up 10mm
z_hop_speed: 5


[screws_tilt_adjust]
screw1: 97, 55
screw1_name: front left
screw2: 97,265
screw2_name: rear left
screw3: 313,265
screw3_name:  read right
screw4: 315,35
screw4_name: front right
horizontal_move_z: 10.
speed:50
screw_thread: CW-M3

[temperature_fan enclosure]
#pin: !rpi:gpio12
pin: rpi:pwmchip0/pwm0
control: pid
sensor_type: DS18B20
serial_no: 28-3c01e07653c6
sensor_mcu: rpi
ds18_report_time: 1.5
min_temp: 0
max_temp: 60
gcode_id: E
target_temp: 0
control: pid
pid_Kp: 40
pid_Ki: 0.2
pid_Kd: 0.1
# The official PC fan spec calls for 21-28kHz PWM frequency, but my Noctua at least was happy with the default 100Hz software PWM. So if your controller doesn't support hardware_pwm then try leaving these two lines out:
hardware_pwm: True
#cycle_time: 0.00004 # 25 kHz
cycle_time: 0.000001


#[temperature_sensor enclosure]
#sensor_type: DS18B20
#serial_no: 28-3c01e07653c6
#   Each 1-wire device has a unique serial number used to identify the device,
#   usually in the format 28-031674b175ff. This parameter must be provided.
#   Attached 1-wire devices can be listed using the following Linux command:
#   ls /sys/bus/w1/devices/
#ds18_report_time:
#   Interval in seconds between readings. Default is 3.0, with a minimum of 1.0
#sensor_mcu: rpi
#   The micro-controller to read from. Must be the host_mcu

[bed_mesh]
speed: 200    #   The speed (in mm/s) of non-probing moves during the calibration. The default is 50.
horizontal_move_z: 8 # height (in mm) that the head should be commanded to move to  just prior to starting a probe
mesh_min: 80,60 # relative to probe location X-47, Y--2 --> 25,25
mesh_max: 253,273 # relative to probe location X-47, Y--2 --> 275,275
probe_count: 4,4 # number of probe points x,y
split_delta_z: .025 # z step ?  The amount of Z difference (in mm) along a move that will trigger a split. Default is .025.
mesh_pps: 2,2 # nr of points per segment to interpolate in the mesh. 

[filament_motion_sensor BTT]
detection_length: 7.0
extruder: extruder
switch_pin: PC2
pause_on_runout: True
runout_gcode: pause_on_runout
event_delay: 3.0
pause_delay: 0.5

[virtual_sdcard]
path: ~/.octoprint/uploads

[display_status]

[pause_resume]
[respond]
[gcode_arcs]
[firmware_retraction]

[palette2]
serial: /dev/serial/by-id/usb-FTDI_FT230X_Basic_UART_DM02GTRS-if00-port0
#   The serial port to connect to the Palette 2.
baud: 115200
#   The baud rate to use. The default is 115200.
feedrate_splice: 0.8
#   The feedrate to use when splicing, default is 0.8
feedrate_normal: 1.0
#   The feedrate to use after splicing, default is 1.0
auto_load_speed: 10
#   Extrude feedrate when autoloading, default is 2 (mm/s)
auto_cancel_variation: 0.15
#   Auto cancel print when ping varation is above this threshold

[mcu rpi]
serial: /tmp/klipper_host_mcu


# [adxl345]
# cs_pin: rpi:None

# [resonance_tester]
# accel_chip: adxl345
# probe_points:
#     100,100,20  # an example

[input_shaper]
shaper_freq_x: 80.8
shaper_type_x: 2hump_ei
shaper_freq_y: 26.8
shaper_type_y: mzv

[idle_timeout]
timeout: 1800
gcode:
    {% if printer.pause_resume.is_paused %}
	  M117 "Printer paused"
    {% else %}
    TURN_OFF_HEATERS
    M84
    {% endif %}



[include kiauh_macros.cfg]
[include macros.cfg]
[include menu.cfg]

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	0.292500, -0.027500, -0.307500, -0.555000
#*# 	0.192500, -0.112500, -0.357500, -0.602500
#*# 	0.197500, -0.065000, -0.340000, -0.502500
#*# 	0.465000, 0.110000, -1.222500, -0.520000
#*# tension = 0.2
#*# min_x = 48.0
#*# algo = lagrange
#*# y_count = 4
#*# mesh_y_pps = 2
#*# min_y = 23.0
#*# x_count = 4
#*# max_y = 272.99
#*# mesh_x_pps = 2
#*# max_x = 252.99
#*#
#*# [bltouch]
#*# z_offset = 0.950
#*#
#*# [extruder]
#*# pid_kp = 38.033
#*# pid_ki = 3.381
#*# pid_kd = 106.969
#*# control = pid
#*#
#*# [bed_mesh bed]
#*# version = 1
#*# points =
#*# 	0.292500, -0.027500, -0.307500, -0.555000
#*# 	0.192500, -0.112500, -0.357500, -0.602500
#*# 	0.197500, -0.065000, -0.340000, -0.502500
#*# 	0.465000, 0.110000, -1.222500, -0.520000
#*# tension = 0.2
#*# min_x = 48.0
#*# algo = lagrange
#*# y_count = 4
#*# mesh_y_pps = 2
#*# min_y = 23.0
#*# x_count = 4
#*# max_y = 272.99
#*# mesh_x_pps = 2
#*# max_x = 252.99
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 76.521
#*# pid_ki = 1.102
#*# pid_kd = 1328.592
